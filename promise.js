//@ sourceMappingURL=promise.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Covenant, Promise, PromiseStream, Transform, bestImmediate, bestTick, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  _ref = require('./covenant'), bestTick = _ref.bestTick, bestImmediate = _ref.bestImmediate, Covenant = _ref.Covenant;

  root.bestTick = bestTick;

  Transform = require('stream').Transform;

  PromiseStream = (function(_super) {

    __extends(PromiseStream, _super);

    function PromiseStream(promise, options) {
      this.promise = promise;
      this.options = options != null ? options : {
        passthrough: "false"
      };
      this.chunks = null;
      PromiseStream.__super__.constructor.call(this);
      this.on('error', this.promise.reject);
      if (!this.options.passthrough) {
        this.resume();
      }
      this;
    }

    PromiseStream.prototype._transform = function(chunk, encoding, callback) {
      this._collect(chunk, encoding, callback);
      if (this.options.passthrough) {
        return callback(null, chunk);
      }
    };

    PromiseStream.prototype.end = function() {
      this.promise.fulfill(this._joinCollection);
      return PromiseStream.__super__.end.call(this);
    };

    PromiseStream.prototype._collect = function(chunk, encoding, callback) {
      if (this.chunks) {
        return this.chunks += chunk;
      } else {
        return this.chunks = chunk;
      }
    };

    PromiseStream.prototype._joinCollection = function() {
      return this.chunks;
    };

    return PromiseStream;

  })(Transform);

  root.PromiseStream = PromiseStream;

  Promise = (function(_super) {

    __extends(Promise, _super);

    function Promise() {
      var _this = this;
      this._httpResolver = function(res) {
        return Promise.prototype._httpResolver.apply(_this, arguments);
      };
      this._nodeResolver = function(err, value) {
        return Promise.prototype._nodeResolver.apply(_this, arguments);
      };
      this.thenable = function() {
        return Promise.prototype.thenable.apply(_this, arguments);
      };
      this.resolver = function() {
        return Promise.prototype.resolver.apply(_this, arguments);
      };
      this.stream = function(options) {
        return Promise.prototype.stream.apply(_this, arguments);
      };
      Promise.__super__.constructor.call(this);
    }

    Promise.makePromise = function(f) {
      var p;
      p = new Promise;
      f(p);
      return p;
    };

    Promise.pending = function() {
      return Promise.makePromise(function() {});
    };

    Promise.fulfilled = function(value) {
      return Promise.makePromise(function(p) {
        return p.fulfill(value);
      });
    };

    Promise.rejected = function(reason) {
      return Promise.makePromise(function(p) {
        return p.reject(reason);
      });
    };

    Promise.fromNode = function(f) {
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return Promise.makePromise(function(p) {
          return f.apply(null, __slice.call(args).concat([p._nodeResolver]));
        });
      };
    };

    Promise.delay = function(ms) {
      return Promise.makePromise(function(p) {
        setTimeout(p.fulfill, ms);
        return p.always(function() {
          return clearTimeout(t);
        });
      });
    };

    Promise.timeout = function(ms, p) {
      return Promise.makePromise(function(p2) {
        var err, t;
        err = new Error("timeout after " + ms + " milliseconds");
        t = setTimeout((function() {
          return p.reject(err);
        }), ms);
        p.then(p2.fulfill, p2.reject);
        return p.always(function() {
          return clearTimeout(t);
        });
      });
    };

    Promise.when = function() {
      var promises;
      promises = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return Promise.makePromise(function(pAll) {
        var i, p, _i, _len, _results;
        pAll.results = new Array(promises.length);
        pAll.numLeft = promises.length;
        if (promises.length === 0) {
          return pAll.fulfill([]);
        } else {
          _results = [];
          for (i = _i = 0, _len = promises.length; _i < _len; i = ++_i) {
            p = promises[i];
            _results.push((function(p, i) {
              return Promise._scheduleResolution(pAll, p, i);
            })(p, i));
          }
          return _results;
        }
      });
    };

    Promise.all = Promise.when;

    Promise.prototype.done = function(onFulfill) {
      return this.then(onFulfill);
    };

    Promise.prototype.fail = function(onReject) {
      return this.then(null, onReject);
    };

    Promise.prototype.always = function(callback) {
      return this.then(callback, callback);
    };

    Promise.prototype.stream = function(options) {
      return new PromiseStream(this, options);
    };

    Promise.prototype.resolver = function() {
      return {
        reject: this.reject,
        fulfill: this.fulfill
      };
    };

    Promise.prototype.thenable = function() {
      return {
        then: this.then,
        done: this.done,
        fail: this.fail,
        always: this.always
      };
    };

    Promise._scheduleResolution = function(pAll, valOrPromise, i) {
      if (Promise._isPromise(valOrPromise)) {
        return valOrPromise.then((function(value) {
          return Promise._scheduleResolution(pAll, value, i);
        }), pAll.reject);
      } else {
        pAll.results[i] = valOrPromise;
        if (--pAll.numLeft === 0) {
          return pAll.fulfill(pAll.results);
        }
      }
    };

    Promise._isPromise = function(p) {
      return typeof (p != null ? p.then : void 0) === 'function';
    };

    Promise.prototype._nodeResolver = function(err, value) {
      if (err) {
        return this.reject(err);
      } else {
        return this.fulfill(value);
      }
    };

    Promise.prototype._httpResolver = function(res) {
      if (res.statusCode === 201) {
        return res.pipe(this.stream());
      } else {
        return this.reject(new Error("HTTP status code " + res.statusCode));
      }
    };

    return Promise;

  }).call(this, Covenant);

  root.Promise = Promise;

}).call(this);
