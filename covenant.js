//@ sourceMappingURL=covenant.map
// Generated by CoffeeScript 1.6.1
(function() {
  var CompletedState, Covenant, FulfilledState, PendingState, RejectedState, ThennableState, nextTick, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  nextTick = (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) || (typeof setImmediate === 'function' && setImmediate) || function(task) {
    return setTimeout(task, 0);
  };

  Covenant = (function() {

    function Covenant() {
      this.state = new PendingState;
    }

    Covenant.prototype.status = function() {
      return this.state.status();
    };

    Covenant.prototype.fulfill = function(value) {
      return this.state = this.state.fulfill(value);
    };

    Covenant.prototype.reject = function(reason) {
      return this.state = this.state.reject(reason);
    };

    Covenant.prototype.then = function(a, b) {
      return this.state.then(a, b);
    };

    return Covenant;

  })();

  root.Covenant = Covenant;

  ThennableState = (function() {

    function ThennableState() {}

    ThennableState.prototype.then = function(onFulfill, onReject) {
      var p2;
      p2 = new Covenant;
      this._schedule(onFulfill, onReject, p2);
      return p2;
    };

    return ThennableState;

  })();

  PendingState = (function(_super) {

    __extends(PendingState, _super);

    function PendingState() {
      this.pendeds = [];
    }

    PendingState.prototype.status = function() {
      return 'pending';
    };

    PendingState.prototype.fulfill = function(value) {
      return new FulfilledState(value, this.pendeds);
    };

    PendingState.prototype.reject = function(reason) {
      return new RejectedState(reason, this.pendeds);
    };

    PendingState.prototype._schedule = function(f, r, p) {
      return this.pendeds.push([f, r, p]);
    };

    return PendingState;

  })(ThennableState);

  CompletedState = (function(_super) {

    __extends(CompletedState, _super);

    function CompletedState(pendeds) {
      var pended, _fn, _i, _len,
        _this = this;
      _fn = function(pended) {
        return _this._schedule.apply(_this, pended);
      };
      for (_i = 0, _len = pendeds.length; _i < _len; _i++) {
        pended = pendeds[_i];
        _fn(pended);
      }
    }

    CompletedState.prototype.fulfill = function() {
      return this;
    };

    CompletedState.prototype.reject = function() {
      return this;
    };

    CompletedState.prototype._do = function(datum, callback, fallback, p2) {
      if (this._isFunction(callback)) {
        return this._handleFunction.apply(this, arguments);
      } else {
        return fallback.call(p2, datum);
      }
    };

    CompletedState.prototype._handleFunction = function(datum, callback, fallback, p2) {
      try {
        return this._handleCallbackResults.apply(this, arguments);
      } catch (e) {
        return p2.reject.call(p2, e);
      }
    };

    CompletedState.prototype._handleCallbackResults = function(datum, callback, fallback, p2) {
      var result;
      if (this._isPromise(result = callback(datum))) {
        return result.then((function(value) {
          return p2.fulfill(value);
        }), (function(reason) {
          return p2.reject(reason);
        }));
      } else {
        return p2.fulfill.call(p2, result);
      }
    };

    CompletedState.prototype._isFunction = function(thing) {
      return typeof thing === 'function';
    };

    CompletedState.prototype._isPromise = function(thing) {
      return this._isFunction(thing != null ? thing.then : void 0);
    };

    return CompletedState;

  })(ThennableState);

  FulfilledState = (function(_super) {

    __extends(FulfilledState, _super);

    function FulfilledState(value, pended) {
      this.value = value;
      FulfilledState.__super__.constructor.call(this, pended);
    }

    FulfilledState.prototype.status = function() {
      return 'fulfilled';
    };

    FulfilledState.prototype._schedule = function(onFulfill, __, p2) {
      var _this = this;
      return nextTick(function() {
        return _this._do(_this.value, onFulfill, p2.fulfill, p2);
      });
    };

    return FulfilledState;

  })(CompletedState);

  RejectedState = (function(_super) {

    __extends(RejectedState, _super);

    function RejectedState(reason, pended) {
      this.reason = reason;
      RejectedState.__super__.constructor.call(this, pended);
    }

    RejectedState.prototype.status = function() {
      return 'rejected';
    };

    RejectedState.prototype._schedule = function(__, onReject, p2) {
      var _this = this;
      return nextTick(function() {
        return _this._do(_this.reason, onReject, p2.reject, p2);
      });
    };

    return RejectedState;

  })(CompletedState);

}).call(this);
