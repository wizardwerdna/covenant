//@ sourceMappingURL=covenant.map
// Generated by CoffeeScript 1.6.1
(function() {
  var CompletedState, Core, Covenant, FulfilledState, PendingState, RejectedState, enqueue, root,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.enqueue = enqueue = (typeof setImmediate === 'function' && setImmediate) || (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) || function(task) {
    return setTimeout(task, 0);
  };

  Covenant = (function() {

    function Covenant(then) {
      this.then = then != null ? then : function() {};
    }

    return Covenant;

  })();

  root.Covenant = Covenant;

  Core = (function(_super) {

    __extends(Core, _super);

    function Core(init) {
      var _this = this;
      if (init == null) {
        init = function() {};
      }
      this._resolveNonCovenantValue = function(value) {
        return Core.prototype._resolveNonCovenantValue.apply(_this, arguments);
      };
      this.resolve = function(value) {
        return Core.prototype.resolve.apply(_this, arguments);
      };
      this.reject = function(reason) {
        return Core.prototype.reject.apply(_this, arguments);
      };
      this.fulfill = function(value) {
        return Core.prototype.fulfill.apply(_this, arguments);
      };
      this.then = function(onFulfill, onReject) {
        return Core.prototype.then.apply(_this, arguments);
      };
      Core.__super__.constructor.call(this, this.then);
      this.state = new PendingState;
      init(this.resolve, this.reject, this);
    }

    Core.prototype.then = function(onFulfill, onReject) {
      var _this = this;
      return new this.constructor(function(res, rej, p2) {
        return _this.state._schedule(onFulfill, onReject, p2);
      });
    };

    Core.prototype.fulfill = function(value) {
      return this.state = this.state.fulfill(value);
    };

    Core.prototype.reject = function(reason) {
      return this.state = this.state.reject(reason);
    };

    Core.prototype.resolve = function(value) {
      if (value instanceof Covenant) {
        return value.then(this.fulfill, this.reject);
      } else {
        return this._resolveNonCovenantValue(value);
      }
    };

    Core.prototype._resolveNonCovenantValue = function(value) {
      var valueThen;
      try {
        valueThen = value != null ? value.then : void 0;
        if (typeof valueThen === 'function') {
          return valueThen(this.resolve, this.reject);
        } else {
          return this.fulfill(value);
        }
      } catch (e) {
        return this.reject(e);
      }
    };

    Core.prototype.promise = function() {
      return new Covenant(this.then);
    };

    return Core;

  })(Covenant);

  root.Core = Core;

  PendingState = (function() {

    function PendingState() {
      this.pendeds = [];
    }

    PendingState.prototype.fulfill = function(value) {
      return new FulfilledState(value, this.pendeds);
    };

    PendingState.prototype.reject = function(reason) {
      return new RejectedState(reason, this.pendeds);
    };

    PendingState.prototype._schedule = function(f, r, p) {
      return this.pendeds.push([f, r, p]);
    };

    return PendingState;

  })();

  CompletedState = (function() {

    function CompletedState(pendeds) {
      var pended, _i, _len;
      for (_i = 0, _len = pendeds.length; _i < _len; _i++) {
        pended = pendeds[_i];
        this._schedule.apply(this, pended);
      }
    }

    CompletedState.prototype.fulfill = function() {
      return this;
    };

    CompletedState.prototype.reject = function() {
      return this;
    };

    CompletedState.prototype._runCallback = function(datum, callback, fallback, p2) {
      try {
        if (typeof callback === 'function') {
          return p2.resolve(callback(datum));
        } else {
          return fallback(datum);
        }
      } catch (e) {
        return p2.reject(e);
      }
    };

    return CompletedState;

  })();

  FulfilledState = (function(_super) {

    __extends(FulfilledState, _super);

    function FulfilledState(value, pended) {
      this.value = value;
      FulfilledState.__super__.constructor.call(this, pended);
    }

    FulfilledState.prototype._schedule = function(onFulfill, __, p2) {
      var _this = this;
      return enqueue(function() {
        return _this._runCallback(_this.value, onFulfill, p2.fulfill, p2);
      });
    };

    return FulfilledState;

  })(CompletedState);

  RejectedState = (function(_super) {

    __extends(RejectedState, _super);

    function RejectedState(reason, pended) {
      this.reason = reason;
      RejectedState.__super__.constructor.call(this, pended);
    }

    RejectedState.prototype._schedule = function(__, onReject, p2) {
      var _this = this;
      return enqueue(function() {
        return _this._runCallback(_this.reason, onReject, p2.reject, p2);
      });
    };

    return RejectedState;

  })(CompletedState);

}).call(this);
